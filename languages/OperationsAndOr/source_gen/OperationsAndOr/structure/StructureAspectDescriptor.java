package OperationsAndOr.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbstractLogicalOperator = createDescriptorForAbstractLogicalOperator();
  /*package*/ final ConceptDescriptor myConceptAnd = createDescriptorForAnd();
  /*package*/ final ConceptDescriptor myConceptOr = createDescriptorForOr();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0x7eb6a2f0f98d463aL, 0xb5fa47dab286dd5fL, "FootballDSL");
    deps.aggregatedLanguage(0x7eb6a2f0f98d463aL, 0xb5fa47dab286dd5fL, "FootballDSL");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractLogicalOperator, myConceptAnd, myConceptOr);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.AbstractLogicalOperator:
        return myConceptAbstractLogicalOperator;
      case LanguageConceptSwitch.And:
        return myConceptAnd;
      case LanguageConceptSwitch.Or:
        return myConceptOr;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAbstractLogicalOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("OperationsAndOr", "AbstractLogicalOperator", 0xdb278c21e78c49dbL, 0xa27d645714e23754L, 0x4ec78d081bbde98cL);
    b.class_(false, true, false);
    // extends: FootballDSL.structure.AbstractLogicalExpression
    b.super_(0x7eb6a2f0f98d463aL, 0xb5fa47dab286dd5fL, 0x4ec78d081bbde999L);
    b.origin("r:7cdb24d9-5e9d-4dea-9bfb-9bd180906637(OperationsAndOr.structure)/5676660921288485260");
    b.version(3);
    b.aggregate("left", 0x4ec78d081bbde99aL).target(0x7eb6a2f0f98d463aL, 0xb5fa47dab286dd5fL, 0x4ec78d081bbde999L).optional(false).ordered(true).multiple(false).origin("5676660921288485274").done();
    b.aggregate("right", 0x4ec78d081bbde99cL).target(0x7eb6a2f0f98d463aL, 0xb5fa47dab286dd5fL, 0x4ec78d081bbde999L).optional(false).ordered(true).multiple(false).origin("5676660921288485276").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAnd() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("OperationsAndOr", "And", 0xdb278c21e78c49dbL, 0xa27d645714e23754L, 0x4ec78d081bbde98bL);
    b.class_(false, false, false);
    // extends: OperationsAndOr.structure.AbstractLogicalOperator
    b.super_(0xdb278c21e78c49dbL, 0xa27d645714e23754L, 0x4ec78d081bbde98cL);
    b.origin("r:7cdb24d9-5e9d-4dea-9bfb-9bd180906637(OperationsAndOr.structure)/5676660921288485259");
    b.version(3);
    b.alias("and");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOr() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("OperationsAndOr", "Or", 0xdb278c21e78c49dbL, 0xa27d645714e23754L, 0x4ec78d081bbde98dL);
    b.class_(false, false, false);
    // extends: OperationsAndOr.structure.AbstractLogicalOperator
    b.super_(0xdb278c21e78c49dbL, 0xa27d645714e23754L, 0x4ec78d081bbde98cL);
    b.origin("r:7cdb24d9-5e9d-4dea-9bfb-9bd180906637(OperationsAndOr.structure)/5676660921288485261");
    b.version(3);
    b.alias("or");
    return b.create();
  }
}
